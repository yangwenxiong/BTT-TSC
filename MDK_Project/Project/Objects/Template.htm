<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jul 15 16:01:47 2019
<BR><P>
<H3>Maximum Stack Usage =       1704 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Hardware_GenericInit &rArr; infoMenuSelect &rArr; scanUpdates &rArr; updateIcon &rArr; bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[17f]">mustStoreCmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ad]">loopProcess</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from spi_slave.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">OTG_FS_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[0]">SD_CD_Inserted</a> from sd.o(i.SD_CD_Inserted) referenced 2 times from vfs.o(.data)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from spi_slave.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from os_timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from serial.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from serial.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from serial.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from serial.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from serial.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1]">USBH_USR_Inserted</a> from usbh_usr.o(i.USBH_USR_Inserted) referenced 2 times from vfs.o(.data)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[4d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4f]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[4e]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[55]">itemDrawIconPress</a> from menu.o(i.itemDrawIconPress) referenced from menu.o(i.menuDrawPage)
 <LI><a href="#[49]">main</a> from main_1.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[61]">menuBabyStep</a> from babystep.o(i.menuBabyStep) referenced from babystep.o(i.menuBabyStep)
 <LI><a href="#[61]">menuBabyStep</a> from babystep.o(i.menuBabyStep) referenced from printing.o(i.menuPrinting)
 <LI><a href="#[5d]">menuBeforePrinting</a> from printing.o(i.menuBeforePrinting) referenced from powerfailed.o(i.menuPowerOff)
 <LI><a href="#[5d]">menuBeforePrinting</a> from printing.o(i.menuBeforePrinting) referenced from print.o(i.menuPrintFromSource)
 <LI><a href="#[63]">menuDisconnect</a> from settings.o(i.menuDisconnect) referenced from settings.o(i.menuSettings)
 <LI><a href="#[59]">menuExtrude</a> from extrude.o(i.menuExtrude) referenced from extrude.o(i.menuExtrude)
 <LI><a href="#[59]">menuExtrude</a> from extrude.o(i.menuExtrude) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[5a]">menuFan</a> from fan.o(i.menuFan) referenced from fan.o(i.menuFan)
 <LI><a href="#[5a]">menuFan</a> from fan.o(i.menuFan) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[5a]">menuFan</a> from fan.o(i.menuFan) referenced from printing.o(i.menuPrinting)
 <LI><a href="#[53]">menuHeat</a> from heat.o(i.menuHeat) referenced from heat.o(i.loopCheckHeater)
 <LI><a href="#[53]">menuHeat</a> from heat.o(i.menuHeat) referenced from heat.o(i.menuHeat)
 <LI><a href="#[53]">menuHeat</a> from heat.o(i.menuHeat) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[53]">menuHeat</a> from heat.o(i.menuHeat) referenced from printing.o(i.menuPrinting)
 <LI><a href="#[57]">menuHome</a> from home.o(i.menuHome) referenced from home.o(i.menuHome)
 <LI><a href="#[57]">menuHome</a> from home.o(i.menuHome) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[62]">menuInfo</a> from settings.o(i.menuInfo) referenced from settings.o(i.menuSettings)
 <LI><a href="#[51]">menuMain</a> from mainpage.o(i.menuMain) referenced from mode.o(i.infoMenuSelect)
 <LI><a href="#[51]">menuMain</a> from mainpage.o(i.menuMain) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[56]">menuMove</a> from move.o(i.menuMove) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[56]">menuMove</a> from move.o(i.menuMove) referenced from move.o(i.menuMove)
 <LI><a href="#[50]">menuPopup</a> from popup.o(i.menuPopup) referenced from parseack.o(i.ackPopupInfo)
 <LI><a href="#[50]">menuPopup</a> from popup.o(i.menuPopup) referenced from popup.o(i.menuPopup)
 <LI><a href="#[50]">menuPopup</a> from popup.o(i.menuPopup) referenced from parseack.o(i.parseACK)
 <LI><a href="#[5e]">menuPowerOff</a> from powerfailed.o(i.menuPowerOff) referenced from powerfailed.o(i.menuPowerOff)
 <LI><a href="#[5e]">menuPowerOff</a> from powerfailed.o(i.menuPowerOff) referenced from print.o(i.menuPrint)
 <LI><a href="#[58]">menuPrint</a> from print.o(i.menuPrint) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[58]">menuPrint</a> from print.o(i.menuPrint) referenced from print.o(i.menuPrint)
 <LI><a href="#[5c]">menuPrintFromSource</a> from print.o(i.menuPrintFromSource) referenced from powerfailed.o(i.menuPowerOff)
 <LI><a href="#[5c]">menuPrintFromSource</a> from print.o(i.menuPrintFromSource) referenced from print.o(i.menuPrint)
 <LI><a href="#[5c]">menuPrintFromSource</a> from print.o(i.menuPrintFromSource) referenced from print.o(i.menuPrintFromSource)
 <LI><a href="#[54]">menuPrinting</a> from printing.o(i.menuPrinting) referenced from printing.o(i.menuBeforePrinting)
 <LI><a href="#[54]">menuPrinting</a> from printing.o(i.menuPrinting) referenced from printing.o(i.menuPrinting)
 <LI><a href="#[54]">menuPrinting</a> from printing.o(i.menuPrinting) referenced from parseack.o(i.parseACK)
 <LI><a href="#[52]">menuST7920</a> from st7920_simulator.o(i.menuST7920) referenced from mode.o(i.infoMenuSelect)
 <LI><a href="#[52]">menuST7920</a> from st7920_simulator.o(i.menuST7920) referenced from st7920_simulator.o(i.menuST7920)
 <LI><a href="#[5b]">menuSettings</a> from settings.o(i.menuSettings) referenced from mainpage.o(i.menuMain)
 <LI><a href="#[5b]">menuSettings</a> from settings.o(i.menuSettings) referenced from settings.o(i.menuSettings)
 <LI><a href="#[60]">menuSpeed</a> from speed.o(i.menuSpeed) referenced from printing.o(i.menuPrinting)
 <LI><a href="#[60]">menuSpeed</a> from speed.o(i.menuSpeed) referenced from speed.o(i.menuSpeed)
 <LI><a href="#[5f]">menuStopPrinting</a> from printing.o(i.menuStopPrinting) referenced from printing.o(i.menuPrinting)
 <LI><a href="#[5f]">menuStopPrinting</a> from printing.o(i.menuStopPrinting) referenced from printing.o(i.menuStopPrinting)
 <LI><a href="#[64]">windowReDrawButton</a> from popup.o(i.windowReDrawButton) referenced from popup.o(i.popupDrawPage)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[65]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[213]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[214]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[215]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[216]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[217]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQ_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuClearGaps
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_DMAReEnable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRequestCommandInfo
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInfoFile
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_CreatePara
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitPrinting
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollFileNameCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPowerFailed
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[93]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterDir
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedSetDriverSource
</UL>

<P><STRONG><a name="[1ed]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[d0]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRootDir
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_second_value
</UL>

<P><STRONG><a name="[92]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_CreatePara
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDir
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterDir
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurGcodeName
</UL>

<P><STRONG><a name="[1ff]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
</UL>

<P><STRONG><a name="[141]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initElements
</UL>

<P><STRONG><a name="[1f3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInfoFile
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedSetDriverSource
</UL>

<P><STRONG><a name="[6e]"></a>strtok_r</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[6d]"></a>strtok</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok &rArr; strtok_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
</UL>

<P><STRONG><a name="[6f]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_value
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateSetAxis
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrudeCoordinateReDraw
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_second_value
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_float
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[21d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[21e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[21f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8a]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[220]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[74]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[7c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[221]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[89]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[8e]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[222]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>Delay_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.Delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[d5]"></a>Delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMA_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init_RGB
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, spi_slave.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_CS_Config
</UL>

<P><STRONG><a name="[91]"></a>EnterDir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vfs.o(i.EnterDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnterDir
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[94]"></a>ExitDir</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vfs.o(i.ExitDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExitDir
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitPrinting
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[95]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storePara
</UL>

<P><STRONG><a name="[98]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[210]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storePara
</UL>

<P><STRONG><a name="[97]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storePara
</UL>

<P><STRONG><a name="[20f]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storePara
</UL>

<P><STRONG><a name="[96]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[d9]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>

<P><STRONG><a name="[d8]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_CS_Config
</UL>

<P><STRONG><a name="[db]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[c2]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[99]"></a>GPIO_RCC_Set</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sw_spi.o(i.GPIO_RCC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_RCC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Config
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Read_Pen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Read_Write
</UL>

<P><STRONG><a name="[10a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Read_Write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_CS_Set
</UL>

<P><STRONG><a name="[f4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Read_Write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_CS_Set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
</UL>

<P><STRONG><a name="[114]"></a>GUI_CancelRange</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui.o(i.GUI_CancelRange))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
</UL>

<P><STRONG><a name="[9b]"></a>GUI_Clear</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gui.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_Clear &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDisconnect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[9d]"></a>GUI_ClearRect</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, gui.o(i.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_ClearRect &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuClearGaps
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTemperature
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showFanSpeed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showExtrudeCoordinate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrudeCoordinateReDraw
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gocdeListDraw
</UL>

<P><STRONG><a name="[9e]"></a>GUI_DispChar</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, gui.o(i.GUI_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispOne
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTemperature
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPercentage
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawTime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
</UL>

<P><STRONG><a name="[a1]"></a>GUI_DispDec</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, gui.o(i.GUI_DispDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetReDraw
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTemperature
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentReDraw
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showFanSpeed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanSpeedReDraw
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPercentage
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentageReDraw
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueBed
</UL>

<P><STRONG><a name="[a2]"></a>GUI_DispFloat</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, gui.o(i.GUI_DispFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_DispFloat &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showBabyStep
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;babyStepReDraw
</UL>

<P><STRONG><a name="[a9]"></a>GUI_DispHz</STRONG> (Thumb, 220 bytes, Stack size 120 bytes, gui.o(i.GUI_DispHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispOne
</UL>

<P><STRONG><a name="[aa]"></a>GUI_DispLenString</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, gui.o(i.GUI_DispLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispOne
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
</UL>

<P><STRONG><a name="[ab]"></a>GUI_DispOne</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gui.o(i.GUI_DispOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispHz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRussia
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isArmenian
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispLenString
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[ae]"></a>GUI_DispString</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gui.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUI_DispString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispOne
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[af]"></a>GUI_DispStringInPrect</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, gui.o(i.GUI_DispStringInPrect))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumeReminderMessage
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTemperature
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showFanSpeed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showExtrudeCoordinate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrudeCoordinateReDraw
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawProgress
</UL>

<P><STRONG><a name="[b0]"></a>GUI_DispStringInRect</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, gui.o(i.GUI_DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispLenString
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDisconnect
</UL>

<P><STRONG><a name="[b2]"></a>GUI_DrawButton</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, gui.o(i.GUI_DrawButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GUI_DrawButton &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VLine
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popupDrawPage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;windowReDrawButton
</UL>

<P><STRONG><a name="[a0]"></a>GUI_DrawPixel</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, gui.o(i.GUI_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_DrawPixel &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispHz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
</UL>

<P><STRONG><a name="[bb]"></a>GUI_DrawPoint</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gui.o(i.GUI_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DrawPoint &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VLine
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
</UL>

<P><STRONG><a name="[bc]"></a>GUI_DrawWindow</STRONG> (Thumb, 606 bytes, Stack size 80 bytes, gui.o(i.GUI_DrawWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GUI_DrawWindow &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VLine
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popupDrawPage
</UL>

<P><STRONG><a name="[b6]"></a>GUI_FillCircle</STRONG> (Thumb, 862 bytes, Stack size 112 bytes, gui.o(i.GUI_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_FillCircle &rArr; GUI_HLine &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busyIndicator
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopBusySignClear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
</UL>

<P><STRONG><a name="[b9]"></a>GUI_FillRect</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, gui.o(i.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_FillRect &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>

<P><STRONG><a name="[bd]"></a>GUI_FillRectColor</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gui.o(i.GUI_FillRectColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_FillRectColor &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_DrawPixel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawProgress
</UL>

<P><STRONG><a name="[b3]"></a>GUI_GetBkColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui.o(i.GUI_GetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>

<P><STRONG><a name="[b4]"></a>GUI_GetColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui.o(i.GUI_GetColor))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>

<P><STRONG><a name="[b7]"></a>GUI_HLine</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gui.o(i.GUI_HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_HLine &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>

<P><STRONG><a name="[ba]"></a>GUI_SetBkColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui.o(i.GUI_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
</UL>

<P><STRONG><a name="[b5]"></a>GUI_SetColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui.o(i.GUI_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumeReminderMessage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busyIndicator
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopBusySignClear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
</UL>

<P><STRONG><a name="[112]"></a>GUI_SetRange</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, gui.o(i.GUI_SetRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI_SetRange
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
</UL>

<P><STRONG><a name="[b8]"></a>GUI_VLine</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, gui.o(i.GUI_VLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_VLine &rArr; GUI_DrawPoint &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>

<P><STRONG><a name="[17a]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[be]"></a>Hardware_GenericInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main_1.o(i.Hardware_GenericInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = Hardware_GenericInit &rArr; infoMenuSelect &rArr; scanUpdates &rArr; updateIcon &rArr; bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storePara
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStoredPara
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TimerInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>ICON_PressedDisplay</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ui_draw.o(i.ICON_PressedDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICON_PressedDisplay &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemDrawIconPress
</UL>

<P><STRONG><a name="[cd]"></a>ICON_ReadDisplay</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ui_draw.o(i.ICON_ReadDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ICON_ReadDisplay &rArr; lcd_frame_display &rArr; lcd_frame_segment_display &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_display
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemDrawIconPress
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
</UL>

<P><STRONG><a name="[cf]"></a>IsRootDir</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, vfs.o(i.IsRootDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRootDir
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[d1]"></a>KEY_GetValue</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, touch_process.o(i.KEY_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = KEY_GetValue &rArr; Key_value &rArr; TS_Get_Coordinates &rArr; XPT2046_Repeated_Compare_AD &rArr; XPT2046_Average_AD &rArr; XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_value
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPopup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuStopPrinting
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[d2]"></a>Key_value</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, touch_process.o(i.Key_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key_value &rArr; TS_Get_Coordinates &rArr; XPT2046_Repeated_Compare_AD &rArr; XPT2046_Average_AD &rArr; XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Get_Coordinates
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetValue
</UL>

<P><STRONG><a name="[d4]"></a>LCD_DMA_Config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ui_draw.o(i.LCD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d6]"></a>LCD_FSMC_Config</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, lcd.o(i.LCD_FSMC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_FSMC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareConfig
</UL>

<P><STRONG><a name="[da]"></a>LCD_GPIO_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lcd.o(i.LCD_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareConfig
</UL>

<P><STRONG><a name="[dc]"></a>LCD_HardwareConfig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.LCD_HardwareConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_HardwareConfig &rArr; LCD_FSMC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c5]"></a>LCD_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Init &rArr; LCD_HardwareConfig &rArr; LCD_FSMC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMA_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init_RGB
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[9c]"></a>LCD_SetWindow</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, gui.o(i.LCD_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_HLine
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectColor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_display
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_PressedDisplay
</UL>

<P><STRONG><a name="[dd]"></a>LCD_init_RGB</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, lcd.o(i.LCD_init_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_init_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[de]"></a>LOGO_ReadDisplay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui_draw.o(i.LOGO_ReadDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LOGO_ReadDisplay &rArr; lcd_frame_display &rArr; lcd_frame_segment_display &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_display
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
</UL>

<P><STRONG><a name="[df]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_CS_Config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SlaveDeInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQ_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TimerInit
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[111]"></a>OS_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_timer.o(i.OS_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestInitTimeOut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestHasTimeOut
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumeReminderMessage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopVolumeSource
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busyIndicator
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopVolumeReminderClear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopReminderClear
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopBusySignClear
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopCheckHeater
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[c1]"></a>OS_TimerInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_timer.o(i.OS_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_TimerInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[d7]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>

<P><STRONG><a name="[f5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Protocol_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>

<P><STRONG><a name="[fd]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SlaveDeInit
</UL>

<P><STRONG><a name="[9a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Protocol_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC_Set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[129]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[0]"></a>SD_CD_Inserted</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd.o(i.SD_CD_Inserted))
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>SD_Cancel_CS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd.o(i.SD_Cancel_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_Cancel_CS &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e3]"></a>SD_Get_Ack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd.o(i.SD_Get_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_Get_Ack &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
</UL>

<P><STRONG><a name="[e4]"></a>SD_Init</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetLowSpeed
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHighSpeed
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[e9]"></a>SD_Read_Data</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sd.o(i.SD_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_Read_Data &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_Wait_Ready &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[ea]"></a>SD_RecvData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sd.o(i.SD_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_RecvData &rArr; SD_Get_Ack &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Data
</UL>

<P><STRONG><a name="[e1]"></a>SD_SPI_CS_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sd.o(i.SD_SPI_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_SPI_CS_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>

<P><STRONG><a name="[e5]"></a>SD_SPI_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd.o(i.SD_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e2]"></a>SD_SPI_Read_Write_Byte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd.o(i.SD_SPI_Read_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Wait_Ready
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Send_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_Ack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>

<P><STRONG><a name="[ee]"></a>SD_Select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd.o(i.SD_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_Select &rArr; SD_Wait_Ready &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Wait_Ready
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_CS_Set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[e7]"></a>SD_SendCmd</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sd.o(i.SD_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_SendCmd &rArr; SD_Select &rArr; SD_Wait_Ready &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f0]"></a>SD_Send_Data</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sd.o(i.SD_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_Send_Data &rArr; SD_Wait_Ready &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Wait_Ready
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Data
</UL>

<P><STRONG><a name="[e8]"></a>SD_SetHighSpeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd.o(i.SD_SetHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SetHighSpeed &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e6]"></a>SD_SetLowSpeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd.o(i.SD_SetLowSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SetLowSpeed &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ef]"></a>SD_Wait_Ready</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd.o(i.SD_Wait_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_Wait_Ready &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Send_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
</UL>

<P><STRONG><a name="[f2]"></a>SD_Write_Data</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sd.o(i.SD_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_Write_Data &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_Wait_Ready &rArr; SD_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Send_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Cancel_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, spi_slave.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>SPI_CS_Set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi.o(i.SPI_CS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_CS_Set
</UL>

<P><STRONG><a name="[f7]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>

<P><STRONG><a name="[ec]"></a>SPI_Config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(i.SPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
</UL>

<P><STRONG><a name="[f3]"></a>SPI_GPIO_Init</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, spi.o(i.SPI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[f8]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write
</UL>

<P><STRONG><a name="[fa]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write
</UL>

<P><STRONG><a name="[f9]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write
</UL>

<P><STRONG><a name="[f6]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>

<P><STRONG><a name="[f1]"></a>SPI_Protocol_Init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spi.o(i.SPI_Protocol_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetLowSpeed
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHighSpeed
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_segment_display
</UL>

<P><STRONG><a name="[90]"></a>SPI_ReEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_slave.o(i.SPI_ReEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>SPI_Read_Write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spi.o(i.SPI_Read_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Read_Write_Byte
</UL>

<P><STRONG><a name="[fb]"></a>SPI_Slave</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, spi_slave.o(i.SPI_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Slave &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
</UL>

<P><STRONG><a name="[fc]"></a>SPI_SlaveDeInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi_slave.o(i.SPI_SlaveDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_SlaveDeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
</UL>

<P><STRONG><a name="[fe]"></a>SPI_Slave_CS_Config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_slave.o(i.SPI_Slave_CS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Slave_CS_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
</UL>

<P><STRONG><a name="[101]"></a>ST7920_DrawByte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, st7920_simulator.o(i.ST7920_DrawByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ST7920_DrawByte &rArr; ST7920_DrawPixel &rArr; GUI_FillRectColor &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_MapCoordinateY
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_MapCoordinateX
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_ParseRecv
</UL>

<P><STRONG><a name="[104]"></a>ST7920_DrawPixel</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, st7920_simulator.o(i.ST7920_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ST7920_DrawPixel &rArr; GUI_FillRectColor &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectColor
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_DrawByte
</UL>

<P><STRONG><a name="[106]"></a>ST7920_IsCtrlByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, st7920_simulator.o(i.ST7920_IsCtrlByte))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_ParseRecv
</UL>

<P><STRONG><a name="[102]"></a>ST7920_MapCoordinateX</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st7920_simulator.o(i.ST7920_MapCoordinateX))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_DrawByte
</UL>

<P><STRONG><a name="[103]"></a>ST7920_MapCoordinateY</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, st7920_simulator.o(i.ST7920_MapCoordinateY))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_DrawByte
</UL>

<P><STRONG><a name="[105]"></a>ST7920_ParseRecv</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, st7920_simulator.o(i.ST7920_ParseRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ST7920_ParseRecv &rArr; ST7920_DrawByte &rArr; ST7920_DrawPixel &rArr; GUI_FillRectColor &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_ST7920_ParseWCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_IsCtrlByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_DrawByte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuST7920
</UL>

<P><STRONG><a name="[107]"></a>ST7920_ST7920_ParseWCmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7920_simulator.o(i.ST7920_ST7920_ParseWCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7920_ST7920_ParseWCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_ParseRecv
</UL>

<P><STRONG><a name="[108]"></a>ST7920_WriteXY</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, st7920_simulator.o(i.ST7920_WriteXY))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_ST7920_ParseWCmd
</UL>

<P><STRONG><a name="[109]"></a>SW_SPI_CS_Set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sw_spi.o(i.SW_SPI_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SW_SPI_CS_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_CS_Set
</UL>

<P><STRONG><a name="[10b]"></a>SW_SPI_Config</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sw_spi.o(i.SW_SPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SW_SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Init
</UL>

<P><STRONG><a name="[10c]"></a>SW_SPI_Read_Write</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, sw_spi.o(i.SW_SPI_Read_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadWriteByte
</UL>

<P><STRONG><a name="[10e]"></a>Scroll_CreatePara</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gui.o(i.Scroll_CreatePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Scroll_CreatePara &rArr; my_strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollFileNameCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gocdeListDraw
</UL>

<P><STRONG><a name="[110]"></a>Scroll_DispString</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, gui.o(i.Scroll_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Scroll_DispString &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetRange
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispLenString
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CancelRange
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRussia
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isArmenian
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[115]"></a>Serial_Config</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, serial.o(i.Serial_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Serial_Config &rArr; USART_Config &rArr; USART_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_ReSourceInit
</UL>

<P><STRONG><a name="[117]"></a>Serial_DMAReEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serial.o(i.Serial_DMAReEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Serial_DMAReEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[20d]"></a>Serial_Puts</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial.o(i.Serial_Puts))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[118]"></a>Serial_ReSourceInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mode.o(i.Serial_ReSourceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Serial_ReSourceInit &rArr; Serial_Config &rArr; USART_Config &rArr; USART_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; loopTouchScreen &rArr; XPT2046_Read_Pen
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopTouchScreen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintingTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TSC_Calibration</STRONG> (Thumb, 730 bytes, Stack size 64 bytes, touch_process.o(i.TSC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TSC_Calibration &rArr; calibrationEnsure &rArr; GUI_DispString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Repeated_Compare_AD
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPress
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[d3]"></a>TS_Get_Coordinates</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, touch_process.o(i.TS_Get_Coordinates))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TS_Get_Coordinates &rArr; XPT2046_Repeated_Compare_AD &rArr; XPT2046_Average_AD &rArr; XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Repeated_Compare_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_value
</UL>

<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, serial.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, serial.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, serial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, serial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, serial.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQ_Init
</UL>

<P><STRONG><a name="[12a]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Protocol_Init
</UL>

<P><STRONG><a name="[116]"></a>USART_Config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART_Config &rArr; USART_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Protocol_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQ_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[124]"></a>USART_GPIO_Init</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, usart.o(i.USART_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[121]"></a>USART_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, serial.o(i.USART_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>USART_IRQ_Init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, usart.o(i.USART_IRQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_IRQ_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[126]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQ_Init
</UL>

<P><STRONG><a name="[128]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Protocol_Init
</UL>

<P><STRONG><a name="[122]"></a>USART_Protocol_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usart.o(i.USART_Protocol_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Protocol_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1e5]"></a>USBH_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_Process))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountUDisk
</UL>

<P><STRONG><a name="[17c]"></a>USBH_UDISK_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_UDISK_Read))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[17e]"></a>USBH_UDISK_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_UDISK_Write))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1]"></a>USBH_USR_Inserted</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_Inserted))
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>W25Qxx_EraseSector</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w25qxx.o(i.W25Qxx_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Qxx_EraseSector &rArr; W25Qxx_WriteEnable &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
</UL>

<P><STRONG><a name="[c4]"></a>W25Qxx_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(i.W25Qxx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W25Qxx_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[9f]"></a>W25Qxx_ReadBuffer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w25qxx.o(i.W25Qxx_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispHz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
</UL>

<P><STRONG><a name="[cb]"></a>W25Qxx_SPI_CS_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w25qxx.o(i.W25Qxx_SPI_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25Qxx_SPI_CS_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_segment_display
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_PressedDisplay
</UL>

<P><STRONG><a name="[cc]"></a>W25Qxx_SPI_Read_Write_Byte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w25qxx.o(i.W25Qxx_SPI_Read_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_segment_display
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_PressedDisplay
</UL>

<P><STRONG><a name="[12d]"></a>W25Qxx_WaitForWriteEnd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, w25qxx.o(i.W25Qxx_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Qxx_WaitForWriteEnd &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
</UL>

<P><STRONG><a name="[12e]"></a>W25Qxx_WriteBuffer</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, w25qxx.o(i.W25Qxx_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25Qxx_WriteBuffer &rArr; W25Qxx_WritePage &rArr; W25Qxx_WriteEnable &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
</UL>

<P><STRONG><a name="[12c]"></a>W25Qxx_WriteEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w25qxx.o(i.W25Qxx_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Qxx_WriteEnable &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
</UL>

<P><STRONG><a name="[12f]"></a>W25Qxx_WritePage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, w25qxx.o(i.W25Qxx_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Qxx_WritePage &rArr; W25Qxx_WriteEnable &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WaitForWriteEnd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteBuffer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
</UL>

<P><STRONG><a name="[130]"></a>XPT2046_Average_AD</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, xpt2046.o(i.XPT2046_Average_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = XPT2046_Average_AD &rArr; XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Repeated_Compare_AD
</UL>

<P><STRONG><a name="[132]"></a>XPT2046_CS_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xpt2046.o(i.XPT2046_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XPT2046_CS_Set &rArr; SW_SPI_CS_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Read_AD
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Init
</UL>

<P><STRONG><a name="[c3]"></a>XPT2046_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, xpt2046.o(i.XPT2046_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = XPT2046_Init &rArr; SW_SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_CS_Set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[133]"></a>XPT2046_ReadWriteByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xpt2046.o(i.XPT2046_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SPI_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Read_AD
</UL>

<P><STRONG><a name="[131]"></a>XPT2046_Read_AD</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, xpt2046.o(i.XPT2046_Read_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_ReadWriteByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_CS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Average_AD
</UL>

<P><STRONG><a name="[134]"></a>XPT2046_Read_Pen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xpt2046.o(i.XPT2046_Read_Pen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XPT2046_Read_Pen
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopTouchScreen
</UL>

<P><STRONG><a name="[11f]"></a>XPT2046_Repeated_Compare_AD</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xpt2046.o(i.XPT2046_Repeated_Compare_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = XPT2046_Repeated_Compare_AD &rArr; XPT2046_Average_AD &rArr; XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Average_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Get_Coordinates
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
</UL>

<P><STRONG><a name="[135]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[224]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[1f9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M27
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M24
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[225]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[226]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[227]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[228]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[138]"></a>ackPopupInfo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, parseack.o(i.ackPopupInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ackPopupInfo &rArr; popupDrawPage &rArr; GUI_DrawButton &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popupDrawPage
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[13d]"></a>babyStepReDraw</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, babystep.o(i.babyStepReDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = babyStepReDraw &rArr; GUI_DispFloat &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[13e]"></a>bmpDecode</STRONG> (Thumb, 438 bytes, Stack size 912 bytes, boot.o(i.bmpDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WritePage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
</UL>

<P><STRONG><a name="[144]"></a>busyIndicator</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, menu.o(i.busyIndicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = busyIndicator &rArr; GUI_FillCircle &rArr; GUI_HLine &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[120]"></a>calibrationEnsure</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, touch_process.o(i.calibrationEnsure))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = calibrationEnsure &rArr; GUI_DispString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Repeated_Compare_AD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPress
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
</UL>

<P><STRONG><a name="[14b]"></a>clearCmdQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, interfacecmd.o(i.clearCmdQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clearCmdQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetUpdateWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
</UL>

<P><STRONG><a name="[14d]"></a>clearInfoFile</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, vfs.o(i.clearInfoFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clearInfoFile &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInfoFile
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFiles
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[14f]"></a>clearPowerFailed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, powerfailed.o(i.clearPowerFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clearPowerFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedDelete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[155]"></a>completePrinting</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, printing.o(i.completePrinting))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSetUpdateWaiting
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endGcodeExecute
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
</UL>

<P><STRONG><a name="[1f1]"></a>coorGetRelative</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coordinate.o(i.coorGetRelative))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[20b]"></a>coorSetRelative</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coordinate.o(i.coorSetRelative))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1a7]"></a>coordinateGetAxis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coordinate.o(i.coordinateGetAxis))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[1c8]"></a>coordinateGetFeedRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coordinate.o(i.coordinateGetFeedRate))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[159]"></a>coordinateSetAxis</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, coordinate.o(i.coordinateSetAxis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = coordinateSetAxis &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[20a]"></a>coordinateSetFeedRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coordinate.o(i.coordinateSetFeedRate))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[165]"></a>currentReDraw</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, heat.o(i.currentReDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = currentReDraw &rArr; GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
</UL>

<P><STRONG><a name="[179]"></a>disk_initialize</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[211]"></a>disk_ioctl</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[17b]"></a>disk_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = disk_read &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[197]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[17d]"></a>disk_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1f2]"></a>eGetRelative</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coordinate.o(i.eGetRelative))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[203]"></a>eSetRelative</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coordinate.o(i.eSetRelative))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[158]"></a>endGcodeExecute</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, printing.o(i.endGcodeExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = endGcodeExecute &rArr; mustStoreCmd &rArr;  loopProcess (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
</UL>

<P><STRONG><a name="[180]"></a>exitPrinting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, printing.o(i.exitPrinting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exitPrinting &rArr; ExitDir
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDir
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
</UL>

<P><STRONG><a name="[181]"></a>extrudeCoordinateReDraw</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, extrude.o(i.extrudeCoordinateReDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = extrudeCoordinateReDraw &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showExtrudeCoordinate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
</UL>

<P><STRONG><a name="[143]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_close &rArr; f_sync &rArr; load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedDelete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedExist
</UL>

<P><STRONG><a name="[185]"></a>f_closedir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdateFile
</UL>

<P><STRONG><a name="[142]"></a>f_lseek</STRONG> (Thumb, 1086 bytes, Stack size 96 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = f_lseek &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedlSeek
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[186]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountUDisk
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountSDCard
</UL>

<P><STRONG><a name="[13f]"></a>f_open</STRONG> (Thumb, 862 bytes, Stack size 136 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCreate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedExist
</UL>

<P><STRONG><a name="[190]"></a>f_opendir</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdateFile
</UL>

<P><STRONG><a name="[140]"></a>f_read</STRONG> (Thumb, 552 bytes, Stack size 80 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedExist
</UL>

<P><STRONG><a name="[191]"></a>f_readdir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_readdir &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
</UL>

<P><STRONG><a name="[183]"></a>f_sync</STRONG> (Thumb, 362 bytes, Stack size 104 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = f_sync &rArr; load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCreate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[194]"></a>f_unlink</STRONG> (Thumb, 258 bytes, Stack size 208 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedDelete
</UL>

<P><STRONG><a name="[195]"></a>f_write</STRONG> (Thumb, 644 bytes, Stack size 80 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_write &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCreate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[1f0]"></a>fanGetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fan.o(i.fanGetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[207]"></a>fanSetSendWaiting</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fan.o(i.fanSetSendWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[206]"></a>fanSetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fan.o(i.fanSetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[196]"></a>fanSpeedReDraw</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fan.o(i.fanSpeedReDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fanSpeedReDraw &rArr; GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuFan
</UL>

<P><STRONG><a name="[15f]"></a>ff_convert</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ff_convert &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[154]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[a6]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>

<P><STRONG><a name="[14e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearInfoFile
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
</UL>

<P><STRONG><a name="[1d3]"></a>getCurFileSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vfs.o(i.getCurFileSource))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInfoFile
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrint
</UL>

<P><STRONG><a name="[199]"></a>getCurGcodeName</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, printing.o(i.getCurGcodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getCurGcodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
</UL>

<P><STRONG><a name="[19a]"></a>getGcodeFromFile</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, printing.o(i.getGcodeFromFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = getGcodeFromFile &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveCacheToCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatHasWaiting
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPrinting
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[18a]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1a0]"></a>gocdeListDraw</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, print.o(i.gocdeListDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gocdeListDraw &rArr; menuDrawItem &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_CreatePara
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollFileNameCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[1a4]"></a>haltPrinting</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, printing.o(i.haltPrinting))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = haltPrinting &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateGetAxis
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M524
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearCmdQueue
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatClearIsWaiting
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitPrinting
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuStopPrinting
</UL>

<P><STRONG><a name="[1a6]"></a>heatClearIsWaiting</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, heat.o(i.heatClearIsWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
</UL>

<P><STRONG><a name="[1d8]"></a>heatGetCurrentTemp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, heat.o(i.heatGetCurrentTemp))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueBed
</UL>

<P><STRONG><a name="[1ca]"></a>heatGetCurrentToolNozzle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heat.o(i.heatGetCurrentToolNozzle))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[1d9]"></a>heatGetTargetTemp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, heat.o(i.heatGetTargetTemp))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueBed
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[19d]"></a>heatHasWaiting</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, heat.o(i.heatHasWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetIsWaiting
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopCheckHeater
</UL>

<P><STRONG><a name="[1a9]"></a>heatSetCurrentTemp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, heat.o(i.heatSetCurrentTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heatSetCurrentTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[20c]"></a>heatSetCurrentToolNozzle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, heat.o(i.heatSetCurrentToolNozzle))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1aa]"></a>heatSetIsWaiting</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, heat.o(i.heatSetIsWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heatSetIsWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatHasWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[205]"></a>heatSetSendWaiting</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heat.o(i.heatSetSendWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1ec]"></a>heatSetTargetTemp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, heat.o(i.heatSetTargetTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heatSetTargetTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1ac]"></a>heatSetUpdateTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heat.o(i.heatSetUpdateTime))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
</UL>

<P><STRONG><a name="[14c]"></a>heatSetUpdateWaiting</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heat.o(i.heatSetUpdateWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearCmdQueue
</UL>

<P><STRONG><a name="[1b4]"></a>inRange</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, my_misc.o(i.inRange))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopCheckHeater
</UL>

<P><STRONG><a name="[c9]"></a>infoMenuSelect</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mode.o(i.infoMenuSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = infoMenuSelect &rArr; scanUpdates &rArr; updateIcon &rArr; bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGO_ReadDisplay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdates
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetUpdateTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_ReSourceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[1e9]"></a>intToString</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, my_misc.o(i.intToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intToString
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
</UL>

<P><STRONG><a name="[ad]"></a>isArmenian</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, language.o(i.isArmenian))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispOne
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>

<P><STRONG><a name="[1dd]"></a>isPause</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printing.o(i.isPause))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintingTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[11e]"></a>isPress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touch_process.o(i.isPress))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDisconnect
</UL>

<P><STRONG><a name="[19b]"></a>isPrinting</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printing.o(i.isPrinting))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintingTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
</UL>

<P><STRONG><a name="[ac]"></a>isRussia</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, language.o(i.isRussia))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispOne
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>

<P><STRONG><a name="[55]"></a>itemDrawIconPress</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, menu.o(i.itemDrawIconPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = itemDrawIconPress &rArr; ICON_ReadDisplay &rArr; lcd_frame_display &rArr; lcd_frame_segment_display &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_ReadDisplay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_PressedDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(i.menuDrawPage)
</UL>
<P><STRONG><a name="[ce]"></a>lcd_frame_display</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ui_draw.o(i.lcd_frame_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_frame_display &rArr; lcd_frame_segment_display &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_segment_display
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGO_ReadDisplay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_ReadDisplay
</UL>

<P><STRONG><a name="[1af]"></a>lcd_frame_segment_display</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ui_draw.o(i.lcd_frame_segment_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_frame_segment_display &rArr; SPI_Protocol_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_Read_Write_Byte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_SPI_CS_Set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Protocol_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_frame_display
</UL>

<P><STRONG><a name="[1a8]"></a>limitValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, my_misc.o(i.limitValue))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetCurrentTemp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedSetPercent
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
</UL>

<P><STRONG><a name="[1b1]"></a>loopBusySignClear</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, menu.o(i.loopBusySignClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = loopBusySignClear &rArr; GUI_FillCircle &rArr; GUI_HLine &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[1b2]"></a>loopCheckHeater</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, heat.o(i.loopCheckHeater))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = loopCheckHeater &rArr; storeCmd &rArr; reminderMessage &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRange
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatHasWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[1ad]"></a>loopProcess</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(i.loopProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopVolumeSource
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopVolumeReminderClear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopReminderClear
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopBusySignClear
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopCheckHeater
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPopup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCacheCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrint
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMain
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHome
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuFan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInfo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuStopPrinting
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[1b8]"></a>loopReminderClear</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, menu.o(i.loopReminderClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = loopReminderClear &rArr; menuDrawTitle &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[11c]"></a>loopTouchScreen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, touch_process.o(i.loopTouchScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = loopTouchScreen &rArr; XPT2046_Read_Pen
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_Read_Pen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>loopVolumeReminderClear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, menu.o(i.loopVolumeReminderClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = loopVolumeReminderClear &rArr; menuDrawTitle &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[1b7]"></a>loopVolumeSource</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, vfs.o(i.loopVolumeSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = loopVolumeSource &rArr; volumeReminderMessage &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumeReminderMessage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main_1.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = main &rArr; Hardware_GenericInit &rArr; infoMenuSelect &rArr; scanUpdates &rArr; updateIcon &rArr; bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1fe]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
</UL>

<P><STRONG><a name="[1f4]"></a>map</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, my_misc.o(i.map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawProgress
</UL>

<P><STRONG><a name="[61]"></a>menuBabyStep</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, babystep.o(i.menuBabyStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = menuBabyStep &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showBabyStep
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;babyStepReDraw
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initElements
</UL>
<BR>[Address Reference Count : 2]<UL><LI> babystep.o(i.menuBabyStep)
<LI> printing.o(i.menuPrinting)
</UL>
<P><STRONG><a name="[5d]"></a>menuBeforePrinting</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, printing.o(i.menuBeforePrinting))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = menuBeforePrinting &rArr; request_M23 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M27
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M24
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSetUpdateWaiting
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startGcodeExecute
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedlSeek
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCreate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> powerfailed.o(i.menuPowerOff)
<LI> print.o(i.menuPrintFromSource)
</UL>
<P><STRONG><a name="[1c7]"></a>menuClearGaps</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, menu.o(i.menuClearGaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = menuClearGaps &rArr; GUI_ClearRect &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
</UL>

<P><STRONG><a name="[63]"></a>menuDisconnect</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, settings.o(i.menuDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = menuDisconnect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.menuSettings)
</UL>
<P><STRONG><a name="[1a2]"></a>menuDrawItem</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, menu.o(i.menuDrawItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = menuDrawItem &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_ReadDisplay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeToPause
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gocdeListDraw
</UL>

<P><STRONG><a name="[1bc]"></a>menuDrawPage</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, menu.o(i.menuDrawPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = menuDrawPage &rArr; menuDrawItem &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuClearGaps
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrint
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMain
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHome
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuFan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[1ba]"></a>menuDrawTitle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, menu.o(i.menuDrawTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = menuDrawTitle &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopVolumeReminderClear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopReminderClear
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
</UL>

<P><STRONG><a name="[59]"></a>menuExtrude</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, extrude.o(i.menuExtrude))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = menuExtrude &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateGetFeedRate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateGetAxis
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentToolNozzle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showExtrudeCoordinate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrudeCoordinateReDraw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainpage.o(i.menuMain)
<LI> extrude.o(i.menuExtrude)
</UL>
<P><STRONG><a name="[5a]"></a>menuFan</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, fan.o(i.menuFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = menuFan &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showFanSpeed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanSpeedReDraw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mainpage.o(i.menuMain)
<LI> fan.o(i.menuFan)
<LI> printing.o(i.menuPrinting)
</UL>
<P><STRONG><a name="[53]"></a>menuHeat</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, heat.o(i.menuHeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = menuHeat &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetReDraw
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTemperature
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatHasWaiting
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentReDraw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 4]<UL><LI> heat.o(i.loopCheckHeater)
<LI> heat.o(i.menuHeat)
<LI> mainpage.o(i.menuMain)
<LI> printing.o(i.menuPrinting)
</UL>
<P><STRONG><a name="[57]"></a>menuHome</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, home.o(i.menuHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = menuHome &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainpage.o(i.menuMain)
<LI> home.o(i.menuHome)
</UL>
<P><STRONG><a name="[62]"></a>menuInfo</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, settings.o(i.menuInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = menuInfo &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.menuSettings)
</UL>
<P><STRONG><a name="[1be]"></a>menuKeyGetValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i.menuKeyGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = menuKeyGetValue &rArr; KEY_GetValue &rArr; Key_value &rArr; TS_Get_Coordinates &rArr; XPT2046_Repeated_Compare_AD &rArr; XPT2046_Average_AD &rArr; XPT2046_Read_AD &rArr; XPT2046_ReadWriteByte &rArr; SW_SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrint
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMain
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHome
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuFan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[51]"></a>menuMain</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, mainpage.o(i.menuMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = menuMain &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainpage.o(i.menuMain)
<LI> mode.o(i.infoMenuSelect)
</UL>
<P><STRONG><a name="[56]"></a>menuMove</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, move.o(i.menuMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = menuMove &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainpage.o(i.menuMain)
<LI> move.o(i.menuMove)
</UL>
<P><STRONG><a name="[50]"></a>menuPopup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, popup.o(i.menuPopup))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = menuPopup &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetValue
</UL>
<BR>[Address Reference Count : 3]<UL><LI> parseack.o(i.ackPopupInfo)
<LI> parseack.o(i.parseACK)
<LI> popup.o(i.menuPopup)
</UL>
<P><STRONG><a name="[5e]"></a>menuPowerOff</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, powerfailed.o(i.menuPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = menuPowerOff &rArr; powerOffGetData &rArr; mustStoreCacheCmd &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountFS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDir
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popupDrawPage
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetValue
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedDelete
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPowerFailed
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedExist
</UL>
<BR>[Address Reference Count : 2]<UL><LI> powerfailed.o(i.menuPowerOff)
<LI> print.o(i.menuPrint)
</UL>
<P><STRONG><a name="[58]"></a>menuPrint</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, print.o(i.menuPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = menuPrint &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInfoFile
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurFileSource
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedSetDriverSource
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainpage.o(i.menuMain)
<LI> print.o(i.menuPrint)
</UL>
<P><STRONG><a name="[5c]"></a>menuPrintFromSource</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, print.o(i.menuPrintFromSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = menuPrintFromSource &rArr; scanPrintFiles &rArr; scanPrintFilesGcodeFs &rArr; request_M20 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearInfoFile
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFiles
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountFS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRootDir
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitDir
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterDir
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollFileNameCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gocdeListDraw
</UL>
<BR>[Address Reference Count : 3]<UL><LI> powerfailed.o(i.menuPowerOff)
<LI> print.o(i.menuPrint)
<LI> print.o(i.menuPrintFromSource)
</UL>
<P><STRONG><a name="[54]"></a>menuPrinting</STRONG> (Thumb, 594 bytes, Stack size 48 bytes, printing.o(i.menuPrinting))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = menuPrinting &rArr; setPrintPause &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetTargetTemp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentToolNozzle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentTemp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueBed
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawProgress
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPrinting
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitPrinting
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPause
</UL>
<BR>[Address Reference Count : 3]<UL><LI> parseack.o(i.parseACK)
<LI> printing.o(i.menuBeforePrinting)
<LI> printing.o(i.menuPrinting)
</UL>
<P><STRONG><a name="[52]"></a>menuST7920</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, st7920_simulator.o(i.menuST7920))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = menuST7920 &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave_CS_Config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SlaveDeInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Slave
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7920_ParseRecv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> st7920_simulator.o(i.menuST7920)
<LI> mode.o(i.infoMenuSelect)
</UL>
<P><STRONG><a name="[5b]"></a>menuSettings</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, settings.o(i.menuSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = menuSettings &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storePara
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mainpage.o(i.menuMain)
<LI> settings.o(i.menuSettings)
</UL>
<P><STRONG><a name="[60]"></a>menuSpeed</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, speed.o(i.menuSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = menuSpeed &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuKeyGetValue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPercentage
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentageReDraw
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printing.o(i.menuPrinting)
<LI> speed.o(i.menuSpeed)
</UL>
<P><STRONG><a name="[5f]"></a>menuStopPrinting</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, printing.o(i.menuStopPrinting))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = menuStopPrinting &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popupDrawPage
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetValue
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printing.o(i.menuStopPrinting)
<LI> printing.o(i.menuPrinting)
</UL>
<P><STRONG><a name="[113]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui.o(i.min))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_DispString
</UL>

<P><STRONG><a name="[1cf]"></a>mountFS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vfs.o(i.mountFS))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mountFS &rArr; mountGcodeSDCard &rArr; request_M21 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountUDisk
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountSDCard
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountGcodeSDCard
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[1e3]"></a>mountGcodeSDCard</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mygcodefs.o(i.mountGcodeSDCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mountGcodeSDCard &rArr; request_M21 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountFS
</UL>

<P><STRONG><a name="[1e1]"></a>mountSDCard</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, myfatfs.o(i.mountSDCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mountSDCard &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountFS
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdates
</UL>

<P><STRONG><a name="[1e2]"></a>mountUDisk</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, myfatfs.o(i.mountUDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mountUDisk &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountFS
</UL>

<P><STRONG><a name="[19e]"></a>moveCacheToCmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, interfacecmd.o(i.moveCacheToCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = moveCacheToCmd &rArr; storeCmd &rArr; reminderMessage &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
</UL>

<P><STRONG><a name="[1e6]"></a>mustStoreCacheCmd</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, interfacecmd.o(i.mustStoreCacheCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mustStoreCacheCmd &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffGetData
</UL>

<P><STRONG><a name="[17f]"></a>mustStoreCmd</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, interfacecmd.o(i.mustStoreCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + In Cycle
<LI>Call Chain = mustStoreCmd &rArr;  loopProcess (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M524
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M27
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M25
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M24
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endGcodeExecute
</UL>

<P><STRONG><a name="[182]"></a>my_sprintf</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, my_misc.o(i.my_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = my_sprintf &rArr; my_vsprintf &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrudeCoordinateReDraw
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawProgress
</UL>

<P><STRONG><a name="[b1]"></a>my_strlen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, language.o(i.my_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRussia
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isArmenian
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_CreatePara
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInfo
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalNameDisp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[1e8]"></a>my_vsprintf</STRONG> (Thumb, 576 bytes, Stack size 96 bytes, my_misc.o(i.my_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = my_vsprintf &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToString
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCacheCmd
</UL>

<P><STRONG><a name="[1a3]"></a>normalNameDisp</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, print.o(i.normalNameDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = normalNameDisp &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetRange
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispLenString
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CancelRange
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gocdeListDraw
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[1b6]"></a>parseACK</STRONG> (Thumb, 804 bytes, Stack size 40 bytes, parseack.o(i.parseACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_DMAReEnable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintCur
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetCurrentTemp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busyIndicator
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ackPopupInfo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_seen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_second_value
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_cmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetTargetTemp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentToolNozzle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[1e0]"></a>percentageReDraw</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, speed.o(i.percentageReDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = percentageReDraw &rArr; GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
</UL>

<P><STRONG><a name="[139]"></a>popupDrawPage</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, popup.o(i.popupDrawPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = popupDrawPage &rArr; GUI_DrawButton &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawWindow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ackPopupInfo
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuStopPrinting
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[19c]"></a>powerFailedCache</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, powerfailed.o(i.powerFailedCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = powerFailedCache &rArr; f_sync &rArr; load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eGetRelative
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateGetFeedRate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateGetAxis
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coorGetRelative
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedGetPercent
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetTargetTemp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentToolNozzle
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanGetSpeed
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPause
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGcodeFromFile
</UL>

<P><STRONG><a name="[1c4]"></a>powerFailedCreate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, powerfailed.o(i.powerFailedCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = powerFailedCreate &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[157]"></a>powerFailedDelete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerfailed.o(i.powerFailedDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPowerFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[20e]"></a>powerFailedEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerfailed.o(i.powerFailedEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1d4]"></a>powerFailedSetDriverSource</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerfailed.o(i.powerFailedSetDriverSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = powerFailedSetDriverSource
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrint
</UL>

<P><STRONG><a name="[1c5]"></a>powerFailedlSeek</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, powerfailed.o(i.powerFailedlSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = powerFailedlSeek &rArr; f_lseek &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[1d1]"></a>powerOffGetData</STRONG> (Thumb, 368 bytes, Stack size 648 bytes, powerfailed.o(i.powerOffGetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = powerOffGetData &rArr; mustStoreCacheCmd &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCacheCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[156]"></a>printSetUpdateWaiting</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, printing.o(i.printSetUpdateWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePrinting
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[1d6]"></a>printingDrawPage</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, printing.o(i.printingDrawPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = printingDrawPage &rArr; menuDrawPage &rArr; menuDrawItem &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispLenString
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawPage
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueNozzle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reValueBed
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reDrawProgress
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurGcodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
</UL>

<P><STRONG><a name="[1d7]"></a>reDrawProgress</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, printing.o(i.reDrawProgress))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = reDrawProgress &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectColor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
</UL>

<P><STRONG><a name="[1dc]"></a>reDrawTime</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, printing.o(i.reDrawTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = reDrawTime &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
</UL>

<P><STRONG><a name="[1db]"></a>reValueBed</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, printing.o(i.reValueBed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = reValueBed &rArr; GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetTargetTemp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
</UL>

<P><STRONG><a name="[1da]"></a>reValueNozzle</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, printing.o(i.reValueNozzle))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = reValueNozzle &rArr; GUI_DispString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetTargetTemp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentToolNozzle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingDrawPage
</UL>

<P><STRONG><a name="[c6]"></a>readStoredPara</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, flashstore.o(i.readStoredPara))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[1e7]"></a>reminderMessage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, menu.o(i.reminderMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = reminderMessage &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCacheCmd
</UL>

<P><STRONG><a name="[1f5]"></a>requestHasTimeOut</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gcode.o(i.requestHasTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = requestHasTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
</UL>

<P><STRONG><a name="[1f6]"></a>requestInitTimeOut</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcode.o(i.requestInitTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = requestInitTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
</UL>

<P><STRONG><a name="[1f7]"></a>request_M20</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gcode.o(i.request_M20))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = request_M20 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestInitTimeOut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestHasTimeOut
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRequestCommandInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
</UL>

<P><STRONG><a name="[1e4]"></a>request_M21</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, gcode.o(i.request_M21))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = request_M21 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestInitTimeOut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestHasTimeOut
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRequestCommandInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountGcodeSDCard
</UL>

<P><STRONG><a name="[1c1]"></a>request_M23</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gcode.o(i.request_M23))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = request_M23 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestInitTimeOut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;requestHasTimeOut
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRequestCommandInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[1c2]"></a>request_M24</STRONG> (Thumb, 40 bytes, Stack size 112 bytes, gcode.o(i.request_M24))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = request_M24 &rArr; mustStoreCmd &rArr;  loopProcess (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[1fa]"></a>request_M25</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcode.o(i.request_M25))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = request_M25 &rArr; mustStoreCmd &rArr;  loopProcess (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
</UL>

<P><STRONG><a name="[1c3]"></a>request_M27</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gcode.o(i.request_M27))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = request_M27 &rArr; mustStoreCmd &rArr;  loopProcess (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[1a5]"></a>request_M524</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcode.o(i.request_M524))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = request_M524 &rArr; mustStoreCmd &rArr;  loopProcess (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haltPrinting
</UL>

<P><STRONG><a name="[1d2]"></a>resetInfoFile</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vfs.o(i.resetInfoFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = resetInfoFile &rArr; clearInfoFile &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearInfoFile
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurFileSource
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrint
</UL>

<P><STRONG><a name="[1fb]"></a>resumeToPause</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, printing.o(i.resumeToPause))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = resumeToPause &rArr; menuDrawItem &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintPause
</UL>

<P><STRONG><a name="[1d5]"></a>scanPrintFiles</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vfs.o(i.scanPrintFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = scanPrintFiles &rArr; scanPrintFilesGcodeFs &rArr; request_M20 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearInfoFile
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesFatFs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFilesGcodeFs
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[1fc]"></a>scanPrintFilesFatFs</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, myfatfs.o(i.scanPrintFilesFatFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = scanPrintFilesFatFs &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearInfoFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFiles
</UL>

<P><STRONG><a name="[1fd]"></a>scanPrintFilesGcodeFs</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, mygcodefs.o(i.scanPrintFilesGcodeFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = scanPrintFilesGcodeFs &rArr; request_M20 &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearInfoFile
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanPrintFiles
</UL>

<P><STRONG><a name="[200]"></a>scanUpdateFile</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, boot.o(i.scanUpdateFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = scanUpdateFile &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdates
</UL>

<P><STRONG><a name="[1ab]"></a>scanUpdates</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, boot.o(i.scanUpdates))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = scanUpdates &rArr; updateIcon &rArr; bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mountSDCard
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateIcon
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateFont
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdateFile
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoMenuSelect
</UL>

<P><STRONG><a name="[1a1]"></a>scrollFileNameCreate</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, print.o(i.scrollFileNameCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scrollFileNameCreate &rArr; Scroll_CreatePara &rArr; my_strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scroll_CreatePara
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gocdeListDraw
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
</UL>

<P><STRONG><a name="[1b5]"></a>sendQueueCmd</STRONG> (Thumb, 1090 bytes, Stack size 32 bytes, interfacecmd.o(i.sendQueueCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sendQueueCmd &rArr; cmd_float &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Puts
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eSetRelative
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateSetFeedRate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coordinateSetAxis
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coorSetRelative
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedSetSendWaiting
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedSetPercent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedGetPercent
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSetUpdateWaiting
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedEnable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetUpdateWaiting
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetTargetTemp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetSendWaiting
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetIsWaiting
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatSetCurrentToolNozzle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetTargetTemp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heatGetCurrentToolNozzle
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanSetSpeed
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanSetSendWaiting
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanGetSpeed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_value
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_seen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_float
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
</UL>

<P><STRONG><a name="[1ee]"></a>setPrintCur</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printing.o(i.setPrintCur))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[1de]"></a>setPrintPause</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, printing.o(i.setPrintPause))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = setPrintPause &rArr; loopProcess &rArr; parseACK &rArr; completePrinting &rArr; powerFailedDelete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eGetRelative
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coorGetRelative
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M25
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M24
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mustStoreCmd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeToPause
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPrinting
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrinting
</UL>

<P><STRONG><a name="[11b]"></a>setPrintingTime</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, printing.o(i.setPrintingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setPrintingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPrinting
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPause
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>showBabyStep</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, babystep.o(i.showBabyStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = showBabyStep &rArr; GUI_DispFloat &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[1c9]"></a>showExtrudeCoordinate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, extrude.o(i.showExtrudeCoordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = showExtrudeCoordinate &rArr; extrudeCoordinateReDraw &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrudeCoordinateReDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
</UL>

<P><STRONG><a name="[1cb]"></a>showFanSpeed</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, fan.o(i.showFanSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = showFanSpeed &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuFan
</UL>

<P><STRONG><a name="[1df]"></a>showPercentage</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, speed.o(i.showPercentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = showPercentage &rArr; GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
</UL>

<P><STRONG><a name="[1cd]"></a>showTemperature</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, heat.o(i.showTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = showTemperature &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispChar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
</UL>

<P><STRONG><a name="[1ef]"></a>speedGetPercent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, speed.o(i.speedGetPercent))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerFailedCache
</UL>

<P><STRONG><a name="[208]"></a>speedSetPercent</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, speed.o(i.speedSetPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = speedSetPercent
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[209]"></a>speedSetSendWaiting</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed.o(i.speedSetSendWaiting))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1c6]"></a>startGcodeExecute</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printing.o(i.startGcodeExecute))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBeforePrinting
</UL>

<P><STRONG><a name="[1b3]"></a>storeCmd</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, interfacecmd.o(i.storeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = storeCmd &rArr; reminderMessage &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveCacheToCmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMove
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMain
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHome
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopCheckHeater
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuFan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExtrude
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSpeed
</UL>

<P><STRONG><a name="[c8]"></a>storePara</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, flashstore.o(i.storePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = storePara &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSettings
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_GenericInit
</UL>

<P><STRONG><a name="[13b]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_second_value
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_float
</UL>

<P><STRONG><a name="[1ce]"></a>targetReDraw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, heat.o(i.targetReDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = targetReDraw &rArr; GUI_DispDec &rArr; GUI_DispChar &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeat
</UL>

<P><STRONG><a name="[11d]"></a>textSelect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, language.o(i.textSelect))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volumeReminderMessage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ackPopupInfo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reminderMessage
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawTitle
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDrawItem
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationEnsure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Calibration
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuDisconnect
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuStopPrinting
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPrintFromSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[201]"></a>updateFont</STRONG> (Thumb, 270 bytes, Stack size 656 bytes, boot.o(i.updateFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = updateFont &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_WriteBuffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_EraseSector
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdates
</UL>

<P><STRONG><a name="[202]"></a>updateIcon</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, boot.o(i.updateIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = updateIcon &rArr; bmpDecode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sprintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGO_ReadDisplay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICON_ReadDisplay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmpDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanUpdates
</UL>

<P><STRONG><a name="[1bb]"></a>volumeReminderMessage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, menu.o(i.volumeReminderMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = volumeReminderMessage &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInPrect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopVolumeSource
</UL>

<P><STRONG><a name="[64]"></a>windowReDrawButton</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, popup.o(i.windowReDrawButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = windowReDrawButton &rArr; GUI_DrawButton &rArr; GUI_DispStringInPrect &rArr; GUI_DispStringInRect &rArr; GUI_DispLenString &rArr; GUI_DispOne &rArr; GUI_DispHz &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawButton
</UL>
<BR>[Address Reference Count : 1]<UL><LI> popup.o(i.popupDrawPage)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[119]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11a]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[145]"></a>change_bitmap</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.change_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[147]"></a>check_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[160]"></a>chk_chr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[150]"></a>clmt_clust</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clmt_clust &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[16d]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[153]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[15a]"></a>create_chain</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[15e]"></a>create_name</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_name &rArr; ff_convert &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[162]"></a>create_xdir</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.create_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_xdir &rArr; xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[166]"></a>dir_alloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[169]"></a>dir_find</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[168]"></a>dir_next</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[16a]"></a>dir_read</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[170]"></a>dir_register</STRONG> (Thumb, 528 bytes, Stack size 128 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[178]"></a>dir_remove</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[167]"></a>dir_sdi</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[171]"></a>fill_fat_chain</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff.o(i.fill_fat_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fill_fat_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[15c]"></a>find_bitmap</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ff.o(i.find_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = find_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[188]"></a>find_volume</STRONG> (Thumb, 1124 bytes, Stack size 96 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[189]"></a>follow_path</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[176]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[15b]"></a>get_fat</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[192]"></a>get_fileinfo</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fileinfo &rArr; get_xdir_info &rArr; ff_convert &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[187]"></a>get_ldnumber</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[19f]"></a>get_xdir_info</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ff.o(i.get_xdir_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_xdir_info &rArr; ff_convert &rArr; W25Qxx_ReadBuffer &rArr; W25Qxx_SPI_Read_Write_Byte &rArr; SPI_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[18e]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[149]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[18b]"></a>ld_qword</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ff.o(i.ld_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[148]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[172]"></a>load_obj_dir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.load_obj_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[16e]"></a>load_xdir</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, ff.o(i.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[14a]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[175]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[161]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[146]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>

<P><STRONG><a name="[16f]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[15d]"></a>put_fat</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[177]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[18d]"></a>remove_chain</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = remove_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[18f]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[18c]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[173]"></a>st_qword</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, ff.o(i.st_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[164]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[174]"></a>store_xdir</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = store_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[16b]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[193]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[16c]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[184]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1b0]"></a>xdir_sum</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff.o(i.xdir_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xdir_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</UL>

<P><STRONG><a name="[163]"></a>xname_sum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.xname_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[151]"></a>cmd_float</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, interfacecmd.o(i.cmd_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cmd_float &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[204]"></a>cmd_seen</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interfacecmd.o(i.cmd_seen))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[152]"></a>cmd_value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, interfacecmd.o(i.cmd_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cmd_value &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueueCmd
</UL>

<P><STRONG><a name="[1eb]"></a>ack_cmp</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, parseack.o(i.ack_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[13a]"></a>ack_second_value</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, parseack.o(i.ack_second_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ack_second_value &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[1ea]"></a>ack_seen</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, parseack.o(i.ack_seen))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[13c]"></a>ack_value</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, parseack.o(i.ack_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ack_value &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseACK
</UL>

<P><STRONG><a name="[1f8]"></a>resetRequestCommandInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gcode.o(i.resetRequestCommandInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resetRequestCommandInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M23
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M21
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_M20
</UL>

<P><STRONG><a name="[1ae]"></a>initElements</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, babystep.o(i.initElements))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initElements &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuBabyStep
</UL>

<P><STRONG><a name="[1d0]"></a>powerFailedExist</STRONG> (Thumb, 68 bytes, Stack size 608 bytes, powerfailed.o(i.powerFailedExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = powerFailedExist &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI_Config &rArr; SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuPowerOff
</UL>

<P><STRONG><a name="[136]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>

<P><STRONG><a name="[4f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL>
<P><STRONG><a name="[88]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[8c]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
